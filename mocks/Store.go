// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	db "github.com/tgfukuda/be-master/db/sqlc"

	uuid "github.com/google/uuid"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// AddAccountBalance provides a mock function with given fields: ctx, arg
func (_m *Store) AddAccountBalance(ctx context.Context, arg db.AddAccountBalanceParams) (db.Account, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.AddAccountBalanceParams) (db.Account, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.AddAccountBalanceParams) db.Account); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.AddAccountBalanceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_AddAccountBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAccountBalance'
type Store_AddAccountBalance_Call struct {
	*mock.Call
}

// AddAccountBalance is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.AddAccountBalanceParams
func (_e *Store_Expecter) AddAccountBalance(ctx interface{}, arg interface{}) *Store_AddAccountBalance_Call {
	return &Store_AddAccountBalance_Call{Call: _e.mock.On("AddAccountBalance", ctx, arg)}
}

func (_c *Store_AddAccountBalance_Call) Run(run func(ctx context.Context, arg db.AddAccountBalanceParams)) *Store_AddAccountBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.AddAccountBalanceParams))
	})
	return _c
}

func (_c *Store_AddAccountBalance_Call) Return(_a0 db.Account, _a1 error) *Store_AddAccountBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_AddAccountBalance_Call) RunAndReturn(run func(context.Context, db.AddAccountBalanceParams) (db.Account, error)) *Store_AddAccountBalance_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccount provides a mock function with given fields: ctx, arg
func (_m *Store) CreateAccount(ctx context.Context, arg db.CreateAccountParams) (db.Account, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateAccountParams) (db.Account, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateAccountParams) db.Account); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateAccountParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type Store_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.CreateAccountParams
func (_e *Store_Expecter) CreateAccount(ctx interface{}, arg interface{}) *Store_CreateAccount_Call {
	return &Store_CreateAccount_Call{Call: _e.mock.On("CreateAccount", ctx, arg)}
}

func (_c *Store_CreateAccount_Call) Run(run func(ctx context.Context, arg db.CreateAccountParams)) *Store_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateAccountParams))
	})
	return _c
}

func (_c *Store_CreateAccount_Call) Return(_a0 db.Account, _a1 error) *Store_CreateAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateAccount_Call) RunAndReturn(run func(context.Context, db.CreateAccountParams) (db.Account, error)) *Store_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEntry provides a mock function with given fields: ctx, arg
func (_m *Store) CreateEntry(ctx context.Context, arg db.CreateEntryParams) (db.Entry, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateEntryParams) (db.Entry, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateEntryParams) db.Entry); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Entry)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateEntryParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEntry'
type Store_CreateEntry_Call struct {
	*mock.Call
}

// CreateEntry is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.CreateEntryParams
func (_e *Store_Expecter) CreateEntry(ctx interface{}, arg interface{}) *Store_CreateEntry_Call {
	return &Store_CreateEntry_Call{Call: _e.mock.On("CreateEntry", ctx, arg)}
}

func (_c *Store_CreateEntry_Call) Run(run func(ctx context.Context, arg db.CreateEntryParams)) *Store_CreateEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateEntryParams))
	})
	return _c
}

func (_c *Store_CreateEntry_Call) Return(_a0 db.Entry, _a1 error) *Store_CreateEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateEntry_Call) RunAndReturn(run func(context.Context, db.CreateEntryParams) (db.Entry, error)) *Store_CreateEntry_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNewSession provides a mock function with given fields: ctx, arg
func (_m *Store) CreateNewSession(ctx context.Context, arg db.CreateNewSessionParams) (db.Session, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateNewSessionParams) (db.Session, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateNewSessionParams) db.Session); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateNewSessionParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateNewSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewSession'
type Store_CreateNewSession_Call struct {
	*mock.Call
}

// CreateNewSession is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.CreateNewSessionParams
func (_e *Store_Expecter) CreateNewSession(ctx interface{}, arg interface{}) *Store_CreateNewSession_Call {
	return &Store_CreateNewSession_Call{Call: _e.mock.On("CreateNewSession", ctx, arg)}
}

func (_c *Store_CreateNewSession_Call) Run(run func(ctx context.Context, arg db.CreateNewSessionParams)) *Store_CreateNewSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateNewSessionParams))
	})
	return _c
}

func (_c *Store_CreateNewSession_Call) Return(_a0 db.Session, _a1 error) *Store_CreateNewSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateNewSession_Call) RunAndReturn(run func(context.Context, db.CreateNewSessionParams) (db.Session, error)) *Store_CreateNewSession_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTransfer provides a mock function with given fields: ctx, arg
func (_m *Store) CreateTransfer(ctx context.Context, arg db.CreateTransferParams) (db.Transfer, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTransferParams) (db.Transfer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTransferParams) db.Transfer); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Transfer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateTransferParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransfer'
type Store_CreateTransfer_Call struct {
	*mock.Call
}

// CreateTransfer is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.CreateTransferParams
func (_e *Store_Expecter) CreateTransfer(ctx interface{}, arg interface{}) *Store_CreateTransfer_Call {
	return &Store_CreateTransfer_Call{Call: _e.mock.On("CreateTransfer", ctx, arg)}
}

func (_c *Store_CreateTransfer_Call) Run(run func(ctx context.Context, arg db.CreateTransferParams)) *Store_CreateTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateTransferParams))
	})
	return _c
}

func (_c *Store_CreateTransfer_Call) Return(_a0 db.Transfer, _a1 error) *Store_CreateTransfer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateTransfer_Call) RunAndReturn(run func(context.Context, db.CreateTransferParams) (db.Transfer, error)) *Store_CreateTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *Store) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) (db.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) db.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type Store_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.CreateUserParams
func (_e *Store_Expecter) CreateUser(ctx interface{}, arg interface{}) *Store_CreateUser_Call {
	return &Store_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *Store_CreateUser_Call) Run(run func(ctx context.Context, arg db.CreateUserParams)) *Store_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateUserParams))
	})
	return _c
}

func (_c *Store_CreateUser_Call) Return(_a0 db.User, _a1 error) *Store_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateUser_Call) RunAndReturn(run func(context.Context, db.CreateUserParams) (db.User, error)) *Store_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserTx provides a mock function with given fields: ctx, arg
func (_m *Store) CreateUserTx(ctx context.Context, arg db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.CreateUserTxResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserTxParams) (db.CreateUserTxResult, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserTxParams) db.CreateUserTxResult); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.CreateUserTxResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateUserTxParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateUserTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserTx'
type Store_CreateUserTx_Call struct {
	*mock.Call
}

// CreateUserTx is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.CreateUserTxParams
func (_e *Store_Expecter) CreateUserTx(ctx interface{}, arg interface{}) *Store_CreateUserTx_Call {
	return &Store_CreateUserTx_Call{Call: _e.mock.On("CreateUserTx", ctx, arg)}
}

func (_c *Store_CreateUserTx_Call) Run(run func(ctx context.Context, arg db.CreateUserTxParams)) *Store_CreateUserTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateUserTxParams))
	})
	return _c
}

func (_c *Store_CreateUserTx_Call) Return(_a0 db.CreateUserTxResult, _a1 error) *Store_CreateUserTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateUserTx_Call) RunAndReturn(run func(context.Context, db.CreateUserTxParams) (db.CreateUserTxResult, error)) *Store_CreateUserTx_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVerifyEmail provides a mock function with given fields: ctx, arg
func (_m *Store) CreateVerifyEmail(ctx context.Context, arg db.CreateVerifyEmailParams) (db.VerifyEmail, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.VerifyEmail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateVerifyEmailParams) (db.VerifyEmail, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateVerifyEmailParams) db.VerifyEmail); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.VerifyEmail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateVerifyEmailParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateVerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVerifyEmail'
type Store_CreateVerifyEmail_Call struct {
	*mock.Call
}

// CreateVerifyEmail is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.CreateVerifyEmailParams
func (_e *Store_Expecter) CreateVerifyEmail(ctx interface{}, arg interface{}) *Store_CreateVerifyEmail_Call {
	return &Store_CreateVerifyEmail_Call{Call: _e.mock.On("CreateVerifyEmail", ctx, arg)}
}

func (_c *Store_CreateVerifyEmail_Call) Run(run func(ctx context.Context, arg db.CreateVerifyEmailParams)) *Store_CreateVerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateVerifyEmailParams))
	})
	return _c
}

func (_c *Store_CreateVerifyEmail_Call) Return(_a0 db.VerifyEmail, _a1 error) *Store_CreateVerifyEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateVerifyEmail_Call) RunAndReturn(run func(context.Context, db.CreateVerifyEmailParams) (db.VerifyEmail, error)) *Store_CreateVerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccount provides a mock function with given fields: ctx, id
func (_m *Store) DeleteAccount(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_DeleteAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccount'
type Store_DeleteAccount_Call struct {
	*mock.Call
}

// DeleteAccount is a helper method to define mock.On call
//  - ctx context.Context
//  - id int64
func (_e *Store_Expecter) DeleteAccount(ctx interface{}, id interface{}) *Store_DeleteAccount_Call {
	return &Store_DeleteAccount_Call{Call: _e.mock.On("DeleteAccount", ctx, id)}
}

func (_c *Store_DeleteAccount_Call) Run(run func(ctx context.Context, id int64)) *Store_DeleteAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Store_DeleteAccount_Call) Return(_a0 error) *Store_DeleteAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_DeleteAccount_Call) RunAndReturn(run func(context.Context, int64) error) *Store_DeleteAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEntry provides a mock function with given fields: ctx, id
func (_m *Store) DeleteEntry(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_DeleteEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEntry'
type Store_DeleteEntry_Call struct {
	*mock.Call
}

// DeleteEntry is a helper method to define mock.On call
//  - ctx context.Context
//  - id int64
func (_e *Store_Expecter) DeleteEntry(ctx interface{}, id interface{}) *Store_DeleteEntry_Call {
	return &Store_DeleteEntry_Call{Call: _e.mock.On("DeleteEntry", ctx, id)}
}

func (_c *Store_DeleteEntry_Call) Run(run func(ctx context.Context, id int64)) *Store_DeleteEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Store_DeleteEntry_Call) Return(_a0 error) *Store_DeleteEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_DeleteEntry_Call) RunAndReturn(run func(context.Context, int64) error) *Store_DeleteEntry_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTransfer provides a mock function with given fields: ctx, id
func (_m *Store) DeleteTransfer(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_DeleteTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTransfer'
type Store_DeleteTransfer_Call struct {
	*mock.Call
}

// DeleteTransfer is a helper method to define mock.On call
//  - ctx context.Context
//  - id int64
func (_e *Store_Expecter) DeleteTransfer(ctx interface{}, id interface{}) *Store_DeleteTransfer_Call {
	return &Store_DeleteTransfer_Call{Call: _e.mock.On("DeleteTransfer", ctx, id)}
}

func (_c *Store_DeleteTransfer_Call) Run(run func(ctx context.Context, id int64)) *Store_DeleteTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Store_DeleteTransfer_Call) Return(_a0 error) *Store_DeleteTransfer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_DeleteTransfer_Call) RunAndReturn(run func(context.Context, int64) error) *Store_DeleteTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, id
func (_m *Store) GetAccount(ctx context.Context, id int64) (db.Account, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Account); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type Store_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//  - ctx context.Context
//  - id int64
func (_e *Store_Expecter) GetAccount(ctx interface{}, id interface{}) *Store_GetAccount_Call {
	return &Store_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, id)}
}

func (_c *Store_GetAccount_Call) Run(run func(ctx context.Context, id int64)) *Store_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Store_GetAccount_Call) Return(_a0 db.Account, _a1 error) *Store_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetAccount_Call) RunAndReturn(run func(context.Context, int64) (db.Account, error)) *Store_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountForUpdate provides a mock function with given fields: ctx, id
func (_m *Store) GetAccountForUpdate(ctx context.Context, id int64) (db.Account, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Account); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetAccountForUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountForUpdate'
type Store_GetAccountForUpdate_Call struct {
	*mock.Call
}

// GetAccountForUpdate is a helper method to define mock.On call
//  - ctx context.Context
//  - id int64
func (_e *Store_Expecter) GetAccountForUpdate(ctx interface{}, id interface{}) *Store_GetAccountForUpdate_Call {
	return &Store_GetAccountForUpdate_Call{Call: _e.mock.On("GetAccountForUpdate", ctx, id)}
}

func (_c *Store_GetAccountForUpdate_Call) Run(run func(ctx context.Context, id int64)) *Store_GetAccountForUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Store_GetAccountForUpdate_Call) Return(_a0 db.Account, _a1 error) *Store_GetAccountForUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetAccountForUpdate_Call) RunAndReturn(run func(context.Context, int64) (db.Account, error)) *Store_GetAccountForUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountForUpdateUnsafe provides a mock function with given fields: ctx, id
func (_m *Store) GetAccountForUpdateUnsafe(ctx context.Context, id int64) (db.Account, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Account); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetAccountForUpdateUnsafe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountForUpdateUnsafe'
type Store_GetAccountForUpdateUnsafe_Call struct {
	*mock.Call
}

// GetAccountForUpdateUnsafe is a helper method to define mock.On call
//  - ctx context.Context
//  - id int64
func (_e *Store_Expecter) GetAccountForUpdateUnsafe(ctx interface{}, id interface{}) *Store_GetAccountForUpdateUnsafe_Call {
	return &Store_GetAccountForUpdateUnsafe_Call{Call: _e.mock.On("GetAccountForUpdateUnsafe", ctx, id)}
}

func (_c *Store_GetAccountForUpdateUnsafe_Call) Run(run func(ctx context.Context, id int64)) *Store_GetAccountForUpdateUnsafe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Store_GetAccountForUpdateUnsafe_Call) Return(_a0 db.Account, _a1 error) *Store_GetAccountForUpdateUnsafe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetAccountForUpdateUnsafe_Call) RunAndReturn(run func(context.Context, int64) (db.Account, error)) *Store_GetAccountForUpdateUnsafe_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntry provides a mock function with given fields: ctx, id
func (_m *Store) GetEntry(ctx context.Context, id int64) (db.Entry, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Entry, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Entry); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Entry)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntry'
type Store_GetEntry_Call struct {
	*mock.Call
}

// GetEntry is a helper method to define mock.On call
//  - ctx context.Context
//  - id int64
func (_e *Store_Expecter) GetEntry(ctx interface{}, id interface{}) *Store_GetEntry_Call {
	return &Store_GetEntry_Call{Call: _e.mock.On("GetEntry", ctx, id)}
}

func (_c *Store_GetEntry_Call) Run(run func(ctx context.Context, id int64)) *Store_GetEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Store_GetEntry_Call) Return(_a0 db.Entry, _a1 error) *Store_GetEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetEntry_Call) RunAndReturn(run func(context.Context, int64) (db.Entry, error)) *Store_GetEntry_Call {
	_c.Call.Return(run)
	return _c
}

// GetSession provides a mock function with given fields: ctx, id
func (_m *Store) GetSession(ctx context.Context, id uuid.UUID) (db.Session, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (db.Session, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) db.Session); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type Store_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//  - ctx context.Context
//  - id uuid.UUID
func (_e *Store_Expecter) GetSession(ctx interface{}, id interface{}) *Store_GetSession_Call {
	return &Store_GetSession_Call{Call: _e.mock.On("GetSession", ctx, id)}
}

func (_c *Store_GetSession_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Store_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Store_GetSession_Call) Return(_a0 db.Session, _a1 error) *Store_GetSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetSession_Call) RunAndReturn(run func(context.Context, uuid.UUID) (db.Session, error)) *Store_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransfer provides a mock function with given fields: ctx, id
func (_m *Store) GetTransfer(ctx context.Context, id int64) (db.Transfer, error) {
	ret := _m.Called(ctx, id)

	var r0 db.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Transfer, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Transfer); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Transfer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransfer'
type Store_GetTransfer_Call struct {
	*mock.Call
}

// GetTransfer is a helper method to define mock.On call
//  - ctx context.Context
//  - id int64
func (_e *Store_Expecter) GetTransfer(ctx interface{}, id interface{}) *Store_GetTransfer_Call {
	return &Store_GetTransfer_Call{Call: _e.mock.On("GetTransfer", ctx, id)}
}

func (_c *Store_GetTransfer_Call) Run(run func(ctx context.Context, id int64)) *Store_GetTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Store_GetTransfer_Call) Return(_a0 db.Transfer, _a1 error) *Store_GetTransfer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetTransfer_Call) RunAndReturn(run func(context.Context, int64) (db.Transfer, error)) *Store_GetTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, username
func (_m *Store) GetUser(ctx context.Context, username string) (db.User, error) {
	ret := _m.Called(ctx, username)

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type Store_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//  - ctx context.Context
//  - username string
func (_e *Store_Expecter) GetUser(ctx interface{}, username interface{}) *Store_GetUser_Call {
	return &Store_GetUser_Call{Call: _e.mock.On("GetUser", ctx, username)}
}

func (_c *Store_GetUser_Call) Run(run func(ctx context.Context, username string)) *Store_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Store_GetUser_Call) Return(_a0 db.User, _a1 error) *Store_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetUser_Call) RunAndReturn(run func(context.Context, string) (db.User, error)) *Store_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccounts provides a mock function with given fields: ctx, arg
func (_m *Store) ListAccounts(ctx context.Context, arg db.ListAccountsParams) ([]db.Account, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListAccountsParams) ([]db.Account, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListAccountsParams) []db.Account); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListAccountsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_ListAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccounts'
type Store_ListAccounts_Call struct {
	*mock.Call
}

// ListAccounts is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.ListAccountsParams
func (_e *Store_Expecter) ListAccounts(ctx interface{}, arg interface{}) *Store_ListAccounts_Call {
	return &Store_ListAccounts_Call{Call: _e.mock.On("ListAccounts", ctx, arg)}
}

func (_c *Store_ListAccounts_Call) Run(run func(ctx context.Context, arg db.ListAccountsParams)) *Store_ListAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListAccountsParams))
	})
	return _c
}

func (_c *Store_ListAccounts_Call) Return(_a0 []db.Account, _a1 error) *Store_ListAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_ListAccounts_Call) RunAndReturn(run func(context.Context, db.ListAccountsParams) ([]db.Account, error)) *Store_ListAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListEntries provides a mock function with given fields: ctx, arg
func (_m *Store) ListEntries(ctx context.Context, arg db.ListEntriesParams) ([]db.Entry, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListEntriesParams) ([]db.Entry, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListEntriesParams) []db.Entry); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Entry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListEntriesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_ListEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEntries'
type Store_ListEntries_Call struct {
	*mock.Call
}

// ListEntries is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.ListEntriesParams
func (_e *Store_Expecter) ListEntries(ctx interface{}, arg interface{}) *Store_ListEntries_Call {
	return &Store_ListEntries_Call{Call: _e.mock.On("ListEntries", ctx, arg)}
}

func (_c *Store_ListEntries_Call) Run(run func(ctx context.Context, arg db.ListEntriesParams)) *Store_ListEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListEntriesParams))
	})
	return _c
}

func (_c *Store_ListEntries_Call) Return(_a0 []db.Entry, _a1 error) *Store_ListEntries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_ListEntries_Call) RunAndReturn(run func(context.Context, db.ListEntriesParams) ([]db.Entry, error)) *Store_ListEntries_Call {
	_c.Call.Return(run)
	return _c
}

// ListEntriesOf provides a mock function with given fields: ctx, arg
func (_m *Store) ListEntriesOf(ctx context.Context, arg db.ListEntriesOfParams) ([]db.Entry, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListEntriesOfParams) ([]db.Entry, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListEntriesOfParams) []db.Entry); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Entry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListEntriesOfParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_ListEntriesOf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEntriesOf'
type Store_ListEntriesOf_Call struct {
	*mock.Call
}

// ListEntriesOf is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.ListEntriesOfParams
func (_e *Store_Expecter) ListEntriesOf(ctx interface{}, arg interface{}) *Store_ListEntriesOf_Call {
	return &Store_ListEntriesOf_Call{Call: _e.mock.On("ListEntriesOf", ctx, arg)}
}

func (_c *Store_ListEntriesOf_Call) Run(run func(ctx context.Context, arg db.ListEntriesOfParams)) *Store_ListEntriesOf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListEntriesOfParams))
	})
	return _c
}

func (_c *Store_ListEntriesOf_Call) Return(_a0 []db.Entry, _a1 error) *Store_ListEntriesOf_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_ListEntriesOf_Call) RunAndReturn(run func(context.Context, db.ListEntriesOfParams) ([]db.Entry, error)) *Store_ListEntriesOf_Call {
	_c.Call.Return(run)
	return _c
}

// ListTransfers provides a mock function with given fields: ctx, arg
func (_m *Store) ListTransfers(ctx context.Context, arg db.ListTransfersParams) ([]db.Transfer, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListTransfersParams) ([]db.Transfer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListTransfersParams) []db.Transfer); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListTransfersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_ListTransfers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransfers'
type Store_ListTransfers_Call struct {
	*mock.Call
}

// ListTransfers is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.ListTransfersParams
func (_e *Store_Expecter) ListTransfers(ctx interface{}, arg interface{}) *Store_ListTransfers_Call {
	return &Store_ListTransfers_Call{Call: _e.mock.On("ListTransfers", ctx, arg)}
}

func (_c *Store_ListTransfers_Call) Run(run func(ctx context.Context, arg db.ListTransfersParams)) *Store_ListTransfers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListTransfersParams))
	})
	return _c
}

func (_c *Store_ListTransfers_Call) Return(_a0 []db.Transfer, _a1 error) *Store_ListTransfers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_ListTransfers_Call) RunAndReturn(run func(context.Context, db.ListTransfersParams) ([]db.Transfer, error)) *Store_ListTransfers_Call {
	_c.Call.Return(run)
	return _c
}

// ListTransfersFrom provides a mock function with given fields: ctx, arg
func (_m *Store) ListTransfersFrom(ctx context.Context, arg db.ListTransfersFromParams) ([]db.Transfer, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListTransfersFromParams) ([]db.Transfer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListTransfersFromParams) []db.Transfer); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListTransfersFromParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_ListTransfersFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransfersFrom'
type Store_ListTransfersFrom_Call struct {
	*mock.Call
}

// ListTransfersFrom is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.ListTransfersFromParams
func (_e *Store_Expecter) ListTransfersFrom(ctx interface{}, arg interface{}) *Store_ListTransfersFrom_Call {
	return &Store_ListTransfersFrom_Call{Call: _e.mock.On("ListTransfersFrom", ctx, arg)}
}

func (_c *Store_ListTransfersFrom_Call) Run(run func(ctx context.Context, arg db.ListTransfersFromParams)) *Store_ListTransfersFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListTransfersFromParams))
	})
	return _c
}

func (_c *Store_ListTransfersFrom_Call) Return(_a0 []db.Transfer, _a1 error) *Store_ListTransfersFrom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_ListTransfersFrom_Call) RunAndReturn(run func(context.Context, db.ListTransfersFromParams) ([]db.Transfer, error)) *Store_ListTransfersFrom_Call {
	_c.Call.Return(run)
	return _c
}

// ListTransfersTo provides a mock function with given fields: ctx, arg
func (_m *Store) ListTransfersTo(ctx context.Context, arg db.ListTransfersToParams) ([]db.Transfer, error) {
	ret := _m.Called(ctx, arg)

	var r0 []db.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListTransfersToParams) ([]db.Transfer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListTransfersToParams) []db.Transfer); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Transfer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListTransfersToParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_ListTransfersTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransfersTo'
type Store_ListTransfersTo_Call struct {
	*mock.Call
}

// ListTransfersTo is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.ListTransfersToParams
func (_e *Store_Expecter) ListTransfersTo(ctx interface{}, arg interface{}) *Store_ListTransfersTo_Call {
	return &Store_ListTransfersTo_Call{Call: _e.mock.On("ListTransfersTo", ctx, arg)}
}

func (_c *Store_ListTransfersTo_Call) Run(run func(ctx context.Context, arg db.ListTransfersToParams)) *Store_ListTransfersTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListTransfersToParams))
	})
	return _c
}

func (_c *Store_ListTransfersTo_Call) Return(_a0 []db.Transfer, _a1 error) *Store_ListTransfersTo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_ListTransfersTo_Call) RunAndReturn(run func(context.Context, db.ListTransfersToParams) ([]db.Transfer, error)) *Store_ListTransfersTo_Call {
	_c.Call.Return(run)
	return _c
}

// TransferTx provides a mock function with given fields: ctx, arg
func (_m *Store) TransferTx(ctx context.Context, arg db.TransferTxParams) (db.TransferTxResult, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.TransferTxResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.TransferTxParams) (db.TransferTxResult, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.TransferTxParams) db.TransferTxResult); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.TransferTxResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.TransferTxParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_TransferTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferTx'
type Store_TransferTx_Call struct {
	*mock.Call
}

// TransferTx is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.TransferTxParams
func (_e *Store_Expecter) TransferTx(ctx interface{}, arg interface{}) *Store_TransferTx_Call {
	return &Store_TransferTx_Call{Call: _e.mock.On("TransferTx", ctx, arg)}
}

func (_c *Store_TransferTx_Call) Run(run func(ctx context.Context, arg db.TransferTxParams)) *Store_TransferTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.TransferTxParams))
	})
	return _c
}

func (_c *Store_TransferTx_Call) Return(_a0 db.TransferTxResult, _a1 error) *Store_TransferTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_TransferTx_Call) RunAndReturn(run func(context.Context, db.TransferTxParams) (db.TransferTxResult, error)) *Store_TransferTx_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccount provides a mock function with given fields: ctx, arg
func (_m *Store) UpdateAccount(ctx context.Context, arg db.UpdateAccountParams) (db.Account, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateAccountParams) (db.Account, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateAccountParams) db.Account); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateAccountParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_UpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccount'
type Store_UpdateAccount_Call struct {
	*mock.Call
}

// UpdateAccount is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.UpdateAccountParams
func (_e *Store_Expecter) UpdateAccount(ctx interface{}, arg interface{}) *Store_UpdateAccount_Call {
	return &Store_UpdateAccount_Call{Call: _e.mock.On("UpdateAccount", ctx, arg)}
}

func (_c *Store_UpdateAccount_Call) Run(run func(ctx context.Context, arg db.UpdateAccountParams)) *Store_UpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateAccountParams))
	})
	return _c
}

func (_c *Store_UpdateAccount_Call) Return(_a0 db.Account, _a1 error) *Store_UpdateAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_UpdateAccount_Call) RunAndReturn(run func(context.Context, db.UpdateAccountParams) (db.Account, error)) *Store_UpdateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEntry provides a mock function with given fields: ctx, arg
func (_m *Store) UpdateEntry(ctx context.Context, arg db.UpdateEntryParams) (db.Entry, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateEntryParams) (db.Entry, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateEntryParams) db.Entry); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Entry)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateEntryParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_UpdateEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEntry'
type Store_UpdateEntry_Call struct {
	*mock.Call
}

// UpdateEntry is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.UpdateEntryParams
func (_e *Store_Expecter) UpdateEntry(ctx interface{}, arg interface{}) *Store_UpdateEntry_Call {
	return &Store_UpdateEntry_Call{Call: _e.mock.On("UpdateEntry", ctx, arg)}
}

func (_c *Store_UpdateEntry_Call) Run(run func(ctx context.Context, arg db.UpdateEntryParams)) *Store_UpdateEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateEntryParams))
	})
	return _c
}

func (_c *Store_UpdateEntry_Call) Return(_a0 db.Entry, _a1 error) *Store_UpdateEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_UpdateEntry_Call) RunAndReturn(run func(context.Context, db.UpdateEntryParams) (db.Entry, error)) *Store_UpdateEntry_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTransferAmount provides a mock function with given fields: ctx, arg
func (_m *Store) UpdateTransferAmount(ctx context.Context, arg db.UpdateTransferAmountParams) (db.Transfer, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateTransferAmountParams) (db.Transfer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateTransferAmountParams) db.Transfer); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Transfer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateTransferAmountParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_UpdateTransferAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTransferAmount'
type Store_UpdateTransferAmount_Call struct {
	*mock.Call
}

// UpdateTransferAmount is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.UpdateTransferAmountParams
func (_e *Store_Expecter) UpdateTransferAmount(ctx interface{}, arg interface{}) *Store_UpdateTransferAmount_Call {
	return &Store_UpdateTransferAmount_Call{Call: _e.mock.On("UpdateTransferAmount", ctx, arg)}
}

func (_c *Store_UpdateTransferAmount_Call) Run(run func(ctx context.Context, arg db.UpdateTransferAmountParams)) *Store_UpdateTransferAmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateTransferAmountParams))
	})
	return _c
}

func (_c *Store_UpdateTransferAmount_Call) Return(_a0 db.Transfer, _a1 error) *Store_UpdateTransferAmount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_UpdateTransferAmount_Call) RunAndReturn(run func(context.Context, db.UpdateTransferAmountParams) (db.Transfer, error)) *Store_UpdateTransferAmount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTransferFrom provides a mock function with given fields: ctx, arg
func (_m *Store) UpdateTransferFrom(ctx context.Context, arg db.UpdateTransferFromParams) (db.Transfer, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateTransferFromParams) (db.Transfer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateTransferFromParams) db.Transfer); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Transfer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateTransferFromParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_UpdateTransferFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTransferFrom'
type Store_UpdateTransferFrom_Call struct {
	*mock.Call
}

// UpdateTransferFrom is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.UpdateTransferFromParams
func (_e *Store_Expecter) UpdateTransferFrom(ctx interface{}, arg interface{}) *Store_UpdateTransferFrom_Call {
	return &Store_UpdateTransferFrom_Call{Call: _e.mock.On("UpdateTransferFrom", ctx, arg)}
}

func (_c *Store_UpdateTransferFrom_Call) Run(run func(ctx context.Context, arg db.UpdateTransferFromParams)) *Store_UpdateTransferFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateTransferFromParams))
	})
	return _c
}

func (_c *Store_UpdateTransferFrom_Call) Return(_a0 db.Transfer, _a1 error) *Store_UpdateTransferFrom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_UpdateTransferFrom_Call) RunAndReturn(run func(context.Context, db.UpdateTransferFromParams) (db.Transfer, error)) *Store_UpdateTransferFrom_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTransferTo provides a mock function with given fields: ctx, arg
func (_m *Store) UpdateTransferTo(ctx context.Context, arg db.UpdateTransferToParams) (db.Transfer, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateTransferToParams) (db.Transfer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateTransferToParams) db.Transfer); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Transfer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateTransferToParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_UpdateTransferTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTransferTo'
type Store_UpdateTransferTo_Call struct {
	*mock.Call
}

// UpdateTransferTo is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.UpdateTransferToParams
func (_e *Store_Expecter) UpdateTransferTo(ctx interface{}, arg interface{}) *Store_UpdateTransferTo_Call {
	return &Store_UpdateTransferTo_Call{Call: _e.mock.On("UpdateTransferTo", ctx, arg)}
}

func (_c *Store_UpdateTransferTo_Call) Run(run func(ctx context.Context, arg db.UpdateTransferToParams)) *Store_UpdateTransferTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateTransferToParams))
	})
	return _c
}

func (_c *Store_UpdateTransferTo_Call) Return(_a0 db.Transfer, _a1 error) *Store_UpdateTransferTo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_UpdateTransferTo_Call) RunAndReturn(run func(context.Context, db.UpdateTransferToParams) (db.Transfer, error)) *Store_UpdateTransferTo_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, arg
func (_m *Store) UpdateUser(ctx context.Context, arg db.UpdateUserParams) (db.User, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateUserParams) (db.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateUserParams) db.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type Store_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.UpdateUserParams
func (_e *Store_Expecter) UpdateUser(ctx interface{}, arg interface{}) *Store_UpdateUser_Call {
	return &Store_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, arg)}
}

func (_c *Store_UpdateUser_Call) Run(run func(ctx context.Context, arg db.UpdateUserParams)) *Store_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateUserParams))
	})
	return _c
}

func (_c *Store_UpdateUser_Call) Return(_a0 db.User, _a1 error) *Store_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_UpdateUser_Call) RunAndReturn(run func(context.Context, db.UpdateUserParams) (db.User, error)) *Store_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVerifyEmail provides a mock function with given fields: ctx, arg
func (_m *Store) UpdateVerifyEmail(ctx context.Context, arg db.UpdateVerifyEmailParams) (db.VerifyEmail, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.VerifyEmail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateVerifyEmailParams) (db.VerifyEmail, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateVerifyEmailParams) db.VerifyEmail); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.VerifyEmail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateVerifyEmailParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_UpdateVerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVerifyEmail'
type Store_UpdateVerifyEmail_Call struct {
	*mock.Call
}

// UpdateVerifyEmail is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.UpdateVerifyEmailParams
func (_e *Store_Expecter) UpdateVerifyEmail(ctx interface{}, arg interface{}) *Store_UpdateVerifyEmail_Call {
	return &Store_UpdateVerifyEmail_Call{Call: _e.mock.On("UpdateVerifyEmail", ctx, arg)}
}

func (_c *Store_UpdateVerifyEmail_Call) Run(run func(ctx context.Context, arg db.UpdateVerifyEmailParams)) *Store_UpdateVerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateVerifyEmailParams))
	})
	return _c
}

func (_c *Store_UpdateVerifyEmail_Call) Return(_a0 db.VerifyEmail, _a1 error) *Store_UpdateVerifyEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_UpdateVerifyEmail_Call) RunAndReturn(run func(context.Context, db.UpdateVerifyEmailParams) (db.VerifyEmail, error)) *Store_UpdateVerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyEmailTx provides a mock function with given fields: ctx, arg
func (_m *Store) VerifyEmailTx(ctx context.Context, arg db.VerifyEmailTxParams) (db.VerifyEmailTxResult, error) {
	ret := _m.Called(ctx, arg)

	var r0 db.VerifyEmailTxResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.VerifyEmailTxParams) (db.VerifyEmailTxResult, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.VerifyEmailTxParams) db.VerifyEmailTxResult); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.VerifyEmailTxResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.VerifyEmailTxParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_VerifyEmailTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyEmailTx'
type Store_VerifyEmailTx_Call struct {
	*mock.Call
}

// VerifyEmailTx is a helper method to define mock.On call
//  - ctx context.Context
//  - arg db.VerifyEmailTxParams
func (_e *Store_Expecter) VerifyEmailTx(ctx interface{}, arg interface{}) *Store_VerifyEmailTx_Call {
	return &Store_VerifyEmailTx_Call{Call: _e.mock.On("VerifyEmailTx", ctx, arg)}
}

func (_c *Store_VerifyEmailTx_Call) Run(run func(ctx context.Context, arg db.VerifyEmailTxParams)) *Store_VerifyEmailTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.VerifyEmailTxParams))
	})
	return _c
}

func (_c *Store_VerifyEmailTx_Call) Return(_a0 db.VerifyEmailTxResult, _a1 error) *Store_VerifyEmailTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_VerifyEmailTx_Call) RunAndReturn(run func(context.Context, db.VerifyEmailTxParams) (db.VerifyEmailTxResult, error)) *Store_VerifyEmailTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
