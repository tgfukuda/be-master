// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/tgfukuda/be-master/pb"
)

// SimpleBankClient is an autogenerated mock type for the SimpleBankClient type
type SimpleBankClient struct {
	mock.Mock
}

type SimpleBankClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SimpleBankClient) EXPECT() *SimpleBankClient_Expecter {
	return &SimpleBankClient_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, in, opts
func (_m *SimpleBankClient) CreateUser(ctx context.Context, in *pb.CreateUserRequest, opts ...grpc.CallOption) (*pb.CreateUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.CreateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateUserRequest, ...grpc.CallOption) (*pb.CreateUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CreateUserRequest, ...grpc.CallOption) *pb.CreateUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.CreateUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.CreateUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimpleBankClient_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type SimpleBankClient_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - in *pb.CreateUserRequest
//  - opts ...grpc.CallOption
func (_e *SimpleBankClient_Expecter) CreateUser(ctx interface{}, in interface{}, opts ...interface{}) *SimpleBankClient_CreateUser_Call {
	return &SimpleBankClient_CreateUser_Call{Call: _e.mock.On("CreateUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SimpleBankClient_CreateUser_Call) Run(run func(ctx context.Context, in *pb.CreateUserRequest, opts ...grpc.CallOption)) *SimpleBankClient_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.CreateUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *SimpleBankClient_CreateUser_Call) Return(_a0 *pb.CreateUserResponse, _a1 error) *SimpleBankClient_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SimpleBankClient_CreateUser_Call) RunAndReturn(run func(context.Context, *pb.CreateUserRequest, ...grpc.CallOption) (*pb.CreateUserResponse, error)) *SimpleBankClient_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function with given fields: ctx, in, opts
func (_m *SimpleBankClient) LoginUser(ctx context.Context, in *pb.LoginUserRequest, opts ...grpc.CallOption) (*pb.LoginUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.LoginUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.LoginUserRequest, ...grpc.CallOption) (*pb.LoginUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.LoginUserRequest, ...grpc.CallOption) *pb.LoginUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.LoginUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.LoginUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimpleBankClient_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type SimpleBankClient_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//  - ctx context.Context
//  - in *pb.LoginUserRequest
//  - opts ...grpc.CallOption
func (_e *SimpleBankClient_Expecter) LoginUser(ctx interface{}, in interface{}, opts ...interface{}) *SimpleBankClient_LoginUser_Call {
	return &SimpleBankClient_LoginUser_Call{Call: _e.mock.On("LoginUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SimpleBankClient_LoginUser_Call) Run(run func(ctx context.Context, in *pb.LoginUserRequest, opts ...grpc.CallOption)) *SimpleBankClient_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.LoginUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *SimpleBankClient_LoginUser_Call) Return(_a0 *pb.LoginUserResponse, _a1 error) *SimpleBankClient_LoginUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SimpleBankClient_LoginUser_Call) RunAndReturn(run func(context.Context, *pb.LoginUserRequest, ...grpc.CallOption) (*pb.LoginUserResponse, error)) *SimpleBankClient_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, in, opts
func (_m *SimpleBankClient) UpdateUser(ctx context.Context, in *pb.UpdateUserRequest, opts ...grpc.CallOption) (*pb.UpdateUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.UpdateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateUserRequest, ...grpc.CallOption) (*pb.UpdateUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateUserRequest, ...grpc.CallOption) *pb.UpdateUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UpdateUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimpleBankClient_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type SimpleBankClient_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - in *pb.UpdateUserRequest
//  - opts ...grpc.CallOption
func (_e *SimpleBankClient_Expecter) UpdateUser(ctx interface{}, in interface{}, opts ...interface{}) *SimpleBankClient_UpdateUser_Call {
	return &SimpleBankClient_UpdateUser_Call{Call: _e.mock.On("UpdateUser",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SimpleBankClient_UpdateUser_Call) Run(run func(ctx context.Context, in *pb.UpdateUserRequest, opts ...grpc.CallOption)) *SimpleBankClient_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.UpdateUserRequest), variadicArgs...)
	})
	return _c
}

func (_c *SimpleBankClient_UpdateUser_Call) Return(_a0 *pb.UpdateUserResponse, _a1 error) *SimpleBankClient_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SimpleBankClient_UpdateUser_Call) RunAndReturn(run func(context.Context, *pb.UpdateUserRequest, ...grpc.CallOption) (*pb.UpdateUserResponse, error)) *SimpleBankClient_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyEmail provides a mock function with given fields: ctx, in, opts
func (_m *SimpleBankClient) VerifyEmail(ctx context.Context, in *pb.VerifyEmailRequest, opts ...grpc.CallOption) (*pb.VerifyEmailResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.VerifyEmailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.VerifyEmailRequest, ...grpc.CallOption) (*pb.VerifyEmailResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.VerifyEmailRequest, ...grpc.CallOption) *pb.VerifyEmailResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.VerifyEmailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.VerifyEmailRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimpleBankClient_VerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyEmail'
type SimpleBankClient_VerifyEmail_Call struct {
	*mock.Call
}

// VerifyEmail is a helper method to define mock.On call
//  - ctx context.Context
//  - in *pb.VerifyEmailRequest
//  - opts ...grpc.CallOption
func (_e *SimpleBankClient_Expecter) VerifyEmail(ctx interface{}, in interface{}, opts ...interface{}) *SimpleBankClient_VerifyEmail_Call {
	return &SimpleBankClient_VerifyEmail_Call{Call: _e.mock.On("VerifyEmail",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *SimpleBankClient_VerifyEmail_Call) Run(run func(ctx context.Context, in *pb.VerifyEmailRequest, opts ...grpc.CallOption)) *SimpleBankClient_VerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.VerifyEmailRequest), variadicArgs...)
	})
	return _c
}

func (_c *SimpleBankClient_VerifyEmail_Call) Return(_a0 *pb.VerifyEmailResponse, _a1 error) *SimpleBankClient_VerifyEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SimpleBankClient_VerifyEmail_Call) RunAndReturn(run func(context.Context, *pb.VerifyEmailRequest, ...grpc.CallOption) (*pb.VerifyEmailResponse, error)) *SimpleBankClient_VerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewSimpleBankClient creates a new instance of SimpleBankClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSimpleBankClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SimpleBankClient {
	mock := &SimpleBankClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
