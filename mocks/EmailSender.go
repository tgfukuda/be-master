// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// EmailSender is an autogenerated mock type for the EmailSender type
type EmailSender struct {
	mock.Mock
}

type EmailSender_Expecter struct {
	mock *mock.Mock
}

func (_m *EmailSender) EXPECT() *EmailSender_Expecter {
	return &EmailSender_Expecter{mock: &_m.Mock}
}

// SendEmail provides a mock function with given fields: subject, content, to, cc, bcc, attachFiles
func (_m *EmailSender) SendEmail(subject string, content string, to []string, cc []string, bcc []string, attachFiles []string) error {
	ret := _m.Called(subject, content, to, cc, bcc, attachFiles)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string, []string, []string, []string) error); ok {
		r0 = rf(subject, content, to, cc, bcc, attachFiles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmailSender_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type EmailSender_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//  - subject string
//  - content string
//  - to []string
//  - cc []string
//  - bcc []string
//  - attachFiles []string
func (_e *EmailSender_Expecter) SendEmail(subject interface{}, content interface{}, to interface{}, cc interface{}, bcc interface{}, attachFiles interface{}) *EmailSender_SendEmail_Call {
	return &EmailSender_SendEmail_Call{Call: _e.mock.On("SendEmail", subject, content, to, cc, bcc, attachFiles)}
}

func (_c *EmailSender_SendEmail_Call) Run(run func(subject string, content string, to []string, cc []string, bcc []string, attachFiles []string)) *EmailSender_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]string), args[3].([]string), args[4].([]string), args[5].([]string))
	})
	return _c
}

func (_c *EmailSender_SendEmail_Call) Return(_a0 error) *EmailSender_SendEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmailSender_SendEmail_Call) RunAndReturn(run func(string, string, []string, []string, []string, []string) error) *EmailSender_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmailSender creates a new instance of EmailSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailSender {
	mock := &EmailSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
