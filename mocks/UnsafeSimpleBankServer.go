// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// UnsafeSimpleBankServer is an autogenerated mock type for the UnsafeSimpleBankServer type
type UnsafeSimpleBankServer struct {
	mock.Mock
}

type UnsafeSimpleBankServer_Expecter struct {
	mock *mock.Mock
}

func (_m *UnsafeSimpleBankServer) EXPECT() *UnsafeSimpleBankServer_Expecter {
	return &UnsafeSimpleBankServer_Expecter{mock: &_m.Mock}
}

// mustEmbedUnimplementedSimpleBankServer provides a mock function with given fields:
func (_m *UnsafeSimpleBankServer) mustEmbedUnimplementedSimpleBankServer() {
	_m.Called()
}

// UnsafeSimpleBankServer_mustEmbedUnimplementedSimpleBankServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedSimpleBankServer'
type UnsafeSimpleBankServer_mustEmbedUnimplementedSimpleBankServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedSimpleBankServer is a helper method to define mock.On call
func (_e *UnsafeSimpleBankServer_Expecter) mustEmbedUnimplementedSimpleBankServer() *UnsafeSimpleBankServer_mustEmbedUnimplementedSimpleBankServer_Call {
	return &UnsafeSimpleBankServer_mustEmbedUnimplementedSimpleBankServer_Call{Call: _e.mock.On("mustEmbedUnimplementedSimpleBankServer")}
}

func (_c *UnsafeSimpleBankServer_mustEmbedUnimplementedSimpleBankServer_Call) Run(run func()) *UnsafeSimpleBankServer_mustEmbedUnimplementedSimpleBankServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UnsafeSimpleBankServer_mustEmbedUnimplementedSimpleBankServer_Call) Return() *UnsafeSimpleBankServer_mustEmbedUnimplementedSimpleBankServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *UnsafeSimpleBankServer_mustEmbedUnimplementedSimpleBankServer_Call) RunAndReturn(run func()) *UnsafeSimpleBankServer_mustEmbedUnimplementedSimpleBankServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewUnsafeSimpleBankServer creates a new instance of UnsafeSimpleBankServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnsafeSimpleBankServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnsafeSimpleBankServer {
	mock := &UnsafeSimpleBankServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
